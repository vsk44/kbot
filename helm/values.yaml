# Default values for helm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1
image:
  registry: "docker.io"
  repository: "vsk4/kbot"
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "v1.0.6-5bc69d8"
  arch: amd64
  os: linux
secret:
  name: "kbot"
  env: "TELE_TOKEN"
  key: "token"
securityContext:
  privileged: true
metricsHost:
  name: "collector:4317"

otelOperator:
  enabled: true
  image:
    registry: "otel"
    repository: "opentelemetry-operator"
    tag: "latest"
    arch: amd64
    os: linux

otelCollector:
  enabled: true
  image:
    registry: "otel"
    repository: "opentelemetry-collector-contrib"
    tag: "0.78.0"
    arch: amd64
    os: linux
  receivers:
    otlp:
      protocols:
        grpc:
        http:
          endpoint: "0.0.0.0:3030"
  exporters:
    logging: {}
    loki:
      endpoint: "http://loki:3100/loki/api/v1/push"
    prometheus:
      endpoint: "0.0.0.0:8889"
  service:
    pipelines:
      logs:
        receivers: [otlp]
        exporters: [loki]
      traces:
        receivers: [otlp]
        exporters: [logging]
      metrics:
        receivers: [otlp]
        exporters: [logging, prometheus]

fluentBit:
  enabled: true
  image:
    registry: "fluent"
    repository: "fluent-bit"
    tag: "latest"
    arch: amd64
    os: linux
  configMap:
    name: fluent-bit-config
    key: fluent-bit.conf 
    luaKey: docker-metadata.lua
  config:
    fluent-bit.conf: |-
      [SERVICE]
          flush 1
          log_level error

      [INPUT]
          Name   tail
          Path   /var/lib/docker/containers/*/*.log
          Parser docker
          Refresh_Interval 30
          Ignore_Older 6h
          Docker_Mode  On
          Tag source.docker.<container_id>
          Tag_Regex (.*\/(?<container_id>.*)-json\.log)

      [FILTER]
          Name   lua
          Match  source.docker.*
          script /fluent-bit/bin/docker-metadata.lua
          call   encrich_with_docker_metadata

      [OUTPUT]
          Name                 opentelemetry
          Match                source.docker.*
          Host                 collector
          Port                 3030
          metrics_uri          /v1/metrics
          logs_uri             /v1/logs
          traces_uri           /v1/traces
          Log_response_payload True
          tls                  off
          tls.verify           off
          # add user-defined labels
          add_label            app fluent-bit
          add_label            color blue

    docker-metadata.lua: |-
      DOCKER_VAR_DIR = '/var/lib/docker/containers/'
      DOCKER_CONTAINER_CONFIG_FILE = '/config.v2.json'
      DOCKER_CONTAINER_METADATA = {
        docker_container_name = '\"Name\":\"/?(.-)\"',
        docker_container_image = '\"Image\":\"/?(.-)\"',
        docker_container_started = '\"StartedAt\":\"/?(.-)\"'
      }

      cache = {}

      -- Gets metadata from config.v2.json file for container
      function get_container_metadata_from_disk(container_id)
        local docker_config_file = DOCKER_VAR_DIR .. container_id .. DOCKER_CONTAINER_CONFIG_FILE
        fl = io.open(docker_config_file, 'r')

        if fl == nil then
          return nil
        end

        -- Parse json file and create record for cache
        local data = {}
        for line in fl:lines() do
          for key, regex in pairs(DOCKER_CONTAINER_METADATA) do
            local match = line:match(regex)
            if match then
              data[key] = match
            end
          end
        end
        fl:close()

        if next(data) == nil then
          return nil
        else
          return data
        end
      end

      function encrich_with_docker_metadata(tag, timestamp, record)
        -- Get container id from tag
        container_id = tag:match'.*%.(.*)'
        if not container_id then
          return 0, 0, 0
        end

        -- Add container_id to record
        new_record = record
        new_record['docker.container_id'] = container_id

        -- Check if we have fresh cache record for container
        local cached_data = cache[container_id]
        if cached_data == nil then
          cached_data = get_container_metadata_from_disk(container_id)
        end

        -- Metadata found in cache or got from disk, enrich record
        if cached_data then
          for key, regex in pairs(DOCKER_CONTAINER_METADATA) do
            new_record[key] = cached_data[key]
          end
        end

        return 1, timestamp, new_record
      end

loki:
  enabled: true
  image:
    registry: "grafana"
    repository: "loki"
    tag: "2.8.2"
    arch: amd64
    os: linux
  authEnabled: false  # Додали новий параметр
  server:
    httpListenPort: 3100
    grpcListenPort: 9096
  common:
    instanceAddr: 127.0.0.1
    pathPrefix: /tmp/loki
    storage:
      filesystem:
        chunksDirectory: /tmp/loki/chunks
        rulesDirectory: /tmp/loki/rules
    replicationFactor: 1
    ring:
      kvstore:
        store: inmemory
  queryRange:
    resultsCache:
      cache:
        embeddedCache:
          enabled: true
          maxSizeMb: 100
  schemaConfig:
    configs:
      - from: 2020-10-24
        store: boltdb-shipper
        objectStore: filesystem
        schema: v11
        index:
          prefix: index_
          period: 24h
  ruler:
    alertmanagerUrl: http://localhost:9093
  analytics:
    reportingEnabled: false

prometheus:
  enabled: true
  image:
    registry: "prom"
    repository: "prometheus"
    tag: "latest"
    arch: amd64
    os: linux
  scrapeInterval: 15s
  evaluationInterval: 15s
  additionalScrapeConfigs:
    - job_name: otel_collector
      scrape_interval: 5s
      static_configs:
        - targets: ['collector:8889']
    - job_name: 'prometheus'
      static_configs:
        - targets: ['localhost:9090']
        
grafana:
  enabled: true
  image:
    registry: "grafana"
    repository: "grafana"
    tag: "9.4.3"
  provisioning:
    datasources: true
  env:
    - name: GF_AUTH_ANONYMOUS_ENABLED
      value: "true"
    - name: GF_AUTH_ANONYMOUS_ORG_ROLE
      value: "Admin"
    - name: GF_AUTH_DISABLE_LOGIN_FORM
      value: "true"
    - name: GF_FEATURE_TOGGLES_ENABLE
      value: "traceqlEditor"
    - name: GF_SERVER_HTTP_PORT
      value: "3002"
  configMap:
    name: grafana-config
    data:
      grafana.yaml: |-
        apiVersion: 1
        datasources:
        - name: Prometheus
          type: prometheus
          uid: prometheus
          orgId: 1
          url: http://prometheus:9090
          basicAuth: false
          isDefault: false
          version: 1
          editable: true
          jsonData:
            httpMethod: GET
        - name: Loki
          type: loki
          access: proxy 
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: false
          version: 1
          editable: true